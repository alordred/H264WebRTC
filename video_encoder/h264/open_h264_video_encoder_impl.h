#ifndef __OPEN_H264_VIDEO_ENCODER_IMPL_H__
#define __OPEN_H264_VIDEO_ENCODER_IMPL_H__

// OpenH264 headers
#include "wels/codec_api.h"
#include "wels/codec_def.h"
#include "wels/codec_app_def.h"

#include "h264_video_encoder.h"

class OpenH264EncoderImpl : public OpenH264Encoder
{
public:
    OpenH264EncoderImpl();

    virtual ~OpenH264EncoderImpl();

    // Free encoder memory.
    //
    // Return value                : WEBRTC_VIDEO_CODEC_OK if OK, < 0 otherwise.
    virtual int Release();

    // Initialize the encoder with the information from the codecSettings
    //
    // Input:
    //          - codec_settings    : Codec settings
    //          - number_of_cores   : Number of cores available for the encoder
    //          - max_payload_size  : The maximum size each payload is allowed
    //                                to have. Usually MTU - overhead.
    //
    // Return value                 : Set bit rate if OK
    //                                <0 - Errors:
    //                                  WEBRTC_VIDEO_CODEC_ERR_PARAMETER
    //                                  WEBRTC_VIDEO_CODEC_ERR_SIZE
    //                                  WEBRTC_VIDEO_CODEC_LEVEL_EXCEEDED
    //                                  WEBRTC_VIDEO_CODEC_MEMORY
    //                                  WEBRTC_VIDEO_CODEC_ERROR
    virtual int InitEncode(const webrtc::VideoCodec *codec_settings,
                           int number_of_cores,
                           size_t max_payload_size);

    // Encode an I420 image (as a part of a video stream). The encoded image
    // will be returned to the user through the encode complete callback.
    //
    // Input:
    //          - input_image       : Image to be encoded
    //          - frame_types       : Frame type to be generated by the encoder.
    //
    // Return value                 : WEBRTC_VIDEO_CODEC_OK if OK
    //                                <0 - Errors:
    //                                  WEBRTC_VIDEO_CODEC_ERR_PARAMETER
    //                                  WEBRTC_VIDEO_CODEC_MEMORY
    //                                  WEBRTC_VIDEO_CODEC_ERROR
    //                                  WEBRTC_VIDEO_CODEC_TIMEOUT

    virtual int Encode(const webrtc::VideoFrame &input_image,
                       const webrtc::CodecSpecificInfo *codec_specific_info,
                       const std::vector<webrtc::VideoFrameType> *frame_types);

    // Register an encode complete callback object.
    //
    // Input:
    //          - callback         : Callback object which handles encoded images.
    //
    // Return value                : WEBRTC_VIDEO_CODEC_OK if OK, < 0 otherwise.
    virtual int RegisterEncodeCompleteCallback(webrtc::EncodedImageCallback *callback);

    // Inform the encoder of the new packet loss rate and the round-trip time of
    // the network.
    //
    //          - packet_loss : Fraction lost
    //                          (loss rate in percent = 100 * packetLoss / 255)
    //          - rtt         : Round-trip time in milliseconds
    // Return value           : WEBRTC_VIDEO_CODEC_OK if OK
    //                          <0 - Errors: WEBRTC_VIDEO_CODEC_ERROR
    //
    virtual int SetChannelParameters(uint32_t packet_loss, int64_t rtt);

    // Inform the encoder about the new target bit rate.
    //
    //          - new_bitrate_kbit : New target bit rate
    //          - frame_rate       : The target frame rate
    //
    // Return value                : WEBRTC_VIDEO_CODEC_OK if OK, < 0 otherwise.
    virtual int SetRates(uint32_t new_bitrate_kbit, uint32_t frame_rate);

private:

    int GetTotalNaluCount(const SFrameBSInfo &info);
    bool GetRTPFragmentationHeaderH264(const SFrameBSInfo &info, webrtc::RTPFragmentationHeader &header, webrtc::EncodedImage &encoded_image);

    uint8_t *buffer;
    size_t buffer_size;
    webrtc::EncodedImageCallback *encoded_complete_callback;
    webrtc::VideoCodec codec;
    bool inited;
    int64_t timestamp;
    ISVCEncoder *encoder;
};  // end of OpenH264Encoder class

#endif  // __OPEN_H264_VIDEO_ENCODER_IMPL_H__
